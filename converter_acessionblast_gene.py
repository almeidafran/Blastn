# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eNK0XYxis6jSVQ6mZ38HV62X9h7-iyFO
"""

!pip install biopython

from Bio import Entrez
from Bio import SeqIO  # Adicione esta linha para importar SeqIO


# Configurar o e-mail para a API do NCBI (obrigatório)
Entrez.email = "francine.almeida@orcid"

def obter_nomes_genes(accessions):
    nomes_genes = {}
    for accession in accessions:
        handle = Entrez.efetch(db="nucleotide", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        features = [feature for feature in record.features if feature.type == "gene"]
        if features:
            nomes_genes[accession] = [feature.qualifiers.get("gene", ["Unknown"])[0] for feature in features]
        else:
            nomes_genes[accession] = ["Nenhum gene encontrado"]
    return nomes_genes

# Lista de accessions obtidos do BLASTN
accessions = ["XM_010916517.3", "XM_010938833.3", "XM_029266338.1"]  # Substitua pelos seus accessions

####caso os acessions estejam em um arquivo
##import pandas as pd

# Carregar o arquivo CSV
#df = pd.read_csv('Sequence_433exclusive_g3_filtrado.csv', sep= ";", header=None)
#print(df)

# Extrair os accessions da segunda coluna
accessions = df.iloc[:, 1].tolist()  # Assumindo que a segunda coluna tem índice 1

# Imprimir a lista de accessions
print(accessions)

# Obter os nomes dos genes associados aos accessions
nomes_genes = obter_nomes_genes(accessions)

# Imprimir os resultados
for accession, genes in nomes_genes.items():
    print(f"Accession: {accession}")
    if genes:
        print(f"Genes associados: {', '.join(genes)}")
    else:
        print("Nenhum gene encontrado")
    print()

#Criar tabela e exportar
   import pandas as pd

# Criar um DataFrame a partir do dicionário nomes_genes
df = pd.DataFrame.from_dict(nomes_genes, orient='index', columns=['Gene'])
df.index.name = 'Accession'

# Imprimir o DataFrame
print(df)
# Exportar o DataFrame para um arquivo CSV
df.to_csv('nomes_genes.csv')